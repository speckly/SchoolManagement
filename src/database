
#STORE--------------------------------------------------------------------------------------------------
def store():
    decryption()
    fh= open("profile.txt" , 'a')
    print("\n\n\n▬▬▬▬▬CREATE▬DATA▬▬▬▬▬")
    print("Please enter the necessary data below")
    print(".")
    time.sleep(1)
    global level

    #get level (glvl)
    def glvl():
        while True:
            try:
                level = int(input("What is your level: Secondary "))
                break
            except ValueError:
               print ("That is not a number do again")
            
        while (level<1) or (level>5):
            print("Your level is not valid, please try again")
            while True:
                try:
                    level = int(input("What is your level: Secondary "))
                    break
                except ValueError:
                   print ("That is not a number do again")

        return level


    #get class (gclss):
    def gclss():
        level = str(glvl())
        print("1.Charity\n2.Integrity\n3.Humility\n4.Respect\n5.Love\n6.Faith\n7.Hope")
        while True:
            try:
                jar = int(input("Please enter the number of your corresponding class: "))
                break
            except ValueError:
               print ("That is not a number do again")

        while (jar<1) or (jar>7):
            print("That input is not valid, please try again")
            while True:
                try:
                    jar = int(input("Please enter the number of your corresponding class: ")) 
                    break
                except ValueError:
                   print ("That is not a number do again")
           
        level = str(level)
        if jar == 1:
            Class = str(level+"cha")
        elif jar == 2:
            Class = str(level+ "int")
        elif jar == 3:
            Class = str(level+"hum")
        elif jar == 4:
            Class = str(level+"res")
        elif jar == 5:
            Class = str(level+"lov")
        elif jar == 6:
            Class = str(level+"fai")
        else:
            Class = str(level+"hop")

        return Class


    #get index number (gindx)
    def gindx():
        while True:
            try:
                number = int(input("Enter your index number: "))
                break
            except ValueError:
               print ("That is not a number do again")
        indexno = ("%02d" % number)
        indexno = str(indexno)

        while (number<1) or (len(indexno)!=2):
            print("Index number has to be 1-2 digits long")
            while True:
                try:
                    number = int(input("Enter your index number: "))
                    break
                except ValueError:
                   print ("That is not a number do again")
            indexno = ("%02d" % number)
            indexno = str(indexno)
            
        return indexno

    #user's date of birth(dtfbrth)
    def dtfbrth():
        print("Date of Birth")
        while True:
            try:
                year = int(input("Year(YYYY): "))
                break
            except ValueError:
                print ("That is not a number do again")
        while year<2002 or year>2010:
            print("That is not a valid year try again")
            while True:
                try:
                    year = int(input("Year(YYYY): "))
                    break
                except ValueError:
                    print ("That is not a number do again")

                    
        while True:
            try:
                month = int(input("Month(MM): "))
                break
            except ValueError:
                print("try again, please enter the number of the month")
        while (month<1) or (month>12):
            print("that is not a valid month")
            while True:
                try:
                    month = int(input("Month(MM): "))
                    break
                except ValueError:
                    print("please enter the number of the month")

        date = 0
        if month == 1 or 3 or 5 or 7 or 8 or 10 or 12:
            while (date<1) or (date>31):
                while True:
                    try:
                        date =  int(input("Day(DD): "))
                        break
                    except ValueError:
                        print("Please enter a number")
                if (date<1) or (date>30):
                    print("that's not a valid day in relation to your month")
                            
        elif month == 4 or 6 or 9 or 11:
            while (date<1) or (date>30):
                while True:
                    try:
                        date =  int(input("Day(DD): "))
                        break
                    except ValueError:
                        print("Please enter a number")
                if (date<1) or (date>30):
                    print("that's not a valid day in relation to your month")
                    
        mumbai = year % 4
        if month == 2:
            if mumbai == 0:
                while (date<1) or (date>29):
                    print("that's not a valid day in relation to your month")
                    while True:
                        try:
                            date =  int(input("Day(DD): "))
                            break
                        except ValueError:
                            print("Please enter a number")
                    if (date<1) or (date>29):
                        print("that's not a valid day in relation to your month")

            else:
                while (date<1) or (date>28):
                    print("that's not a valid day in relation to your year and month")
                    while True:
                        try:
                            date =  int(input("Day(DD): "))
                            break
                        except ValueError:
                            print("Please enter a number")
            
                    
                    
        month = str("%02d" % month)
        date = str(date)
        year = str(year)
        donk = str(date+"/"+month+"/"+year)
        return (donk)

        


    #save data (savdat)
    def savdat():
        fullname= input("full name(Birth certificate): ")
        while fullname == "":
            print("this is a compulsory question")
            fullname= input("full name(Birth certificate): ")
        with open('profile.txt') as f:
            normal = f.readlines()
        check = normal[3::12]
        checkmate = str(fullname+"\n") in check
        while checkmate == True:
            print("that is not a valid name, try again")
            fullname= input("full name(Birth certificate): ")
            while fullname == "":
                print("this is a compulsory question")
                fullname= input("full name(Birth certificate): ")
            check = normal[3::12]
            checkmate = str(fullname+"\n") in check

        dob = dtfbrth()

        gender = input("gender: ")
        while gender == "":
            print("this is a compulsory question")
            gender = input("gender: ")
        with open('profile.txt') as f:
            normal = f.readlines()
        check = normal[3::12]
        checkmate = str(gender +"\n") in check
        while checkmate == True:
            print("that is not a valid gender (YES SHUT UP NOT VALID), try again")
            gender = input("gender: ")
            while gender == "":
                print("this is a compulsory question")
                gender = input("gender: ")
            check = normal[3::12]
            checkmate = str(gender +"\n") in check

        nation = input("nationality: ")
        while nation == "":
            print("this is a compulsory question")
            nation = input("nationality: ")
        with open('profile.txt') as f:
            normal = f.readlines()
        check = normal[3::12]
        checkmate = str(nation +"\n") in check
        while checkmate == True:
            print("that is not a valid nationality, try again")
            nation = input("nationality: ")
            while nation == "":
                print("this is a compulsory question")
                nation = input("nationality: ")
            check = normal[3::12]
            checkmate = str(nation +"\n") in check
                
        address = input("address: ")
        while address == "":
            print("this is a compulsory question")
            address = input("address: ")
        with open('profile.txt') as f:
            normal = f.readlines()
        check = normal[3::12]
        checkmate = str(address +"\n") in check
        while checkmate == True:
            print("that is not a valid ADDRESS, try again")
            address = input("address: ")
            while address == "":
                print("this is a compulsory question")
                address = input("address: ")
            check = normal[3::12]
            checkmate = str(address +"\n") in check
                
        medcon = input("any medical conditions: ")
        while medcon =="":
            print("this is a compulsory question")
            medcon = input("any medical conditions: ")
        with open('profile.txt') as f:
            normal = f.readlines()
        check = normal[3::12]
        checkmate = str(medcon +"\n") in check
        while checkmate == True:
            print("that is not a valid input, try again")
            medcon = input("any medical conditions: ")
            while medcon =="":
                print("this is a compulsory question")
                medcon = input("any medical conditions: ")
            check = normal[3::12]
            checkmate = str(medcon +"\n") in check   

        while True:
            try:
                stdntno = int(input("student phone number: "))
                break
            except ValueError:
                print ("THAT IS NOT A NUMBER DO AGAIN")
        studenthp = str(stdntno)
        while (len(studenthp) < 8) or (stdntno<1):
            print ("that is not a valid phone number")
            while True:
                try:
                    stdntno = int(input("student phone number: "))
                    break
                except ValueError:
                    print ("THAT IS NOT A NUMBER DO AGAIN")
            studenthp = str(stdntno) 

        parentname = input("Parent/Guardian's name: ")
        while parentname == "":
             print("this is a compulsory question")
             parentname = input("Parent/Guardian's name: ")
        with open('profile.txt') as f:
            normal = f.readlines()
        check = normal[3::12]
        checkmate = str(parentname +"\n") in check
        while checkmate == True:
            print("that is not a valid input, try again")
            parentname = input("Parent/Guardian's name: ")
            while parentname == "":
                 print("this is a compulsory question")
                 parentname = input("Parent/Guardian's name: ")
            check = normal[3::12]
            checkmate = str(parentname +"\n") in check
            
        while True:
            try:
                prnthpno = int(input("parent/guardian's phone number: "))
                break
            except ValueError:
               print ("THAT IS NOT A NUMBER DO AGAIN")
        parenthp = str(prnthpno)
        while (len(parenthp) < 8) or (prnthpno < 1):
            print ("that is not a valid phone number")            
            while True:
                try:
                    prnthpno = int(input("parent/guardian's phone number: "))
                    break
                except ValueError:
                   print ("THAT IS NOT A NUMBER DO AGAIN")
            parenthp = str(prnthpno)

        fh= open('profile.txt','a')
        fh.write('\n')
        fh.write(fullname)
        fh.write('\n')
        fh.write(dob)
        fh.write('\n')
        fh.write(gender)
        fh.write('\n')
        fh.write(nation)
        fh.write('\n')
        fh.write(address)
        fh.write('\n')
        fh.write(medcon)
        fh.write('\n')
        fh.write(studenthp)
        fh.write('\n')
        fh.write(parentname)
        fh.write('\n')
        fh.write(parenthp)
        fh.close()
        time.sleep(1)
        print("your data has been saved")

        
    #check if tag is in file(citiif)
    def citiif(string_to_search):
        ritchiepenis = open('profile.txt', 'r').readlines()
        if string_to_search in ritchiepenis[3::12]:
            return True
        return False

    def fpotif(file_name, string_to_search):
        dorrito = open(file_name, 'r').readlines()
        chewchewchew = dorrito.index(string_to_search)
        return chewchewchew


    user_class = gclss()
    user_indexno = gindx()    
    search_tag= str(user_class+user_indexno+"\n")
    broccoli = 0
        
    while citiif(search_tag)==True:
        print("sorry but index number", user_indexno, "from class", user_class, "has already registered")
        ginger = input("would you like to try again or exit? press any button to try again or 1 to exit ")
        if ginger == "1":
            print("goodbye")
            broccoli = 1
        else:
            print(".\nenter another class and/or index number")
            user_class = gclss()
            user_indexno = gindx()
            search_tag= str(user_class+user_indexno+"\n")


    if citiif("deleted line"+"\n") == True:
        fleas = fpotif('profile.txt',("deleted line"+"\n"))
        koon = open('profile.txt', 'r').read().splitlines()
        search_tag = search_tag.rstrip()
        koon[fleas] = search_tag
        koon[fleas+1] = user_class
        koon[fleas+2] = user_indexno
        open('profile.txt','w').write("\n".join(koon))

        fullname= input("full name(Birth certificate): ")
        while fullname == "":
            print("this is a compulsory question")
            fullname= input("full name(Birth certificate): ")
        with open('profile.txt') as f:
            normal = f.readlines()
        check = normal[3::12]
        checkmate = str(fullname+"\n") in check
        while (checkmate == True):
            print("that is not a valid name, try again")
            fullname= input("full name(Birth certificate): ")
            while fullname == "":
                print("this is a compulsory question")
                fullname= input("full name(Birth certificate): ")
            check = normal[3::12]
            checkmate = str(fullname+"\n") in check
        koon[fleas+3] = str(fullname)
        open('profile.txt','w').write("\n".join(koon))

        dob = dtfbrth()
        koon[fleas+4] = str(dob)
        open('profile.txt','w').write("\n".join(koon))

        gender = input("gender: ")
        while gender == "":
            print("this is a compulsory question")
            gender = input("gender: ")
        with open('profile.txt') as f:
            normal = f.readlines()
        check = normal[3::12]
        checkmate = str(gender +"\n") in check
        while (checkmate == True):
            print("that is not a valid gender (YES SHUT UP NOT VALID), try again")
            gender = input("gender: ")
            while gender == "":
                print("this is a compulsory question")
                gender = input("gender: ")
            check = normal[3::12]
            checkmate = str(gender +"\n") in check
        koon[fleas+5] = str(gender)
        open('profile.txt','w').write("\n".join(koon))

        nation = input("nationality: ")
        while nation == "":
            print("this is a compulsory question")
            nation = input("nationality: ")
        with open('profile.txt') as f:
            normal = f.readlines()
        check = normal[3::12]
        checkmate = str(nation +"\n") in check
        while (checkmate == True):
            print("that is not a valid nationality, try again")
            nation = input("nationality: ")
            while nation == "":
                print("this is a compulsory question")
                nation = input("nationality: ")
            check = normal[3::12]
            checkmate = str(nation +"\n") in check    
        koon[fleas+6] = str(nation)
        open('profile.txt','w').write("\n".join(koon))

        address = input("address: ")
        while address == "":
            print("this is a compulsory question")
            address = input("address: ")
        with open('profile.txt') as f:
            normal = f.readlines()
        check = normal[3::12]
        checkmate = str(address +"\n") in check
        while (checkmate == True):
            print("that is not a valid ADDRESS, try again")
            address = input("address: ")
            while address == "":
                print("this is a compulsory question")
                address = input("address: ")
            check = normal[3::12]
            checkmate = str(address +"\n") in check
        koon[fleas+7] = str(address)
        open('profile.txt','w').write("\n".join(koon))
        
        medcon = input("any medical conditions: ")
        while medcon =="":
            print("this is a compulsory question")
            medcon = input("any medical conditions: ")
        with open('profile.txt') as f:
            normal = f.readlines()
        check = normal[3::12]
        checkmate = str(medcon +"\n") in check
        while (checkmate == True):
            print("that is not a valid input, try again")
            medcon = input("any medical conditions: ")
            while medcon =="":
                print("this is a compulsory question")
                medcon = input("any medical conditions: ")
            check = normal[3::12]
            checkmate = str(medcon +"\n") in check   
        koon[fleas+8] = str(medcon)
        open('profile.txt','w').write("\n".join(koon))

        while True:
            try:
                stdntno = int(input("student phone number: "))
                break
            except ValueError:
                print ("THAT IS NOT A NUMBER DO AGAIN")
        studenthp = str(stdntno)
        while (len(studenthp) < 8) or (stdntno<1):
            print ("that is not a valid phone number")
            while True:
                try:
                    stdntno = int(input("student phone number: "))
                    break
                except ValueError:
                    print ("THAT IS NOT A NUMBER DO AGAIN")
            studenthp = str(stdntno)
        koon[fleas+9] = str(studenthp)
        open('profile.txt','w').write("\n".join(koon))


        parentname = input("Parent/Guardian's name: ")
        while parentname == "":
             print("this is a compulsory question")
             parentname = input("Parent/Guardian's name: ")
        with open('profile.txt') as f:
            normal = f.readlines()
        check = normal[3::12]
        checkmate = str(parentname +"\n") in check
        while (checkmate == True):
            print("that is not a valid input, try again")
            parentname = input("Parent/Guardian's name: ")
            while parentname == "":
                 print("this is a compulsory question")
                 parentname = input("Parent/Guardian's name: ")
            check = normal[3::12]
            checkmate = str(parentname +"\n") in check
        koon[fleas+10] = str(parentname)
        open('profile.txt','w').write("\n".join(koon))


        while True:
            try:
                prnthpno = int(input("parent/guardian's phone number: "))
                break
            except ValueError:
               print ("THAT IS NOT A NUMBER DO AGAIN")
        parenthp = str(prnthpno)
        while (len(parenthp) < 8) or (prnthpno<1):
            print ("that is not a valid phone number")            
            while True:
                try:
                    prnthpno = int(input("parent/guardian's phone number: "))
                    break
                except ValueError:
                   print ("THAT IS NOT A NUMBER DO AGAIN")
            parenthp = str(parentno) 
        koon[fleas+11] = str(parenthp)
        open('profile.txt','w').write("\n".join(koon))
        
        broccoli = 9




    if broccoli == 0:
        fh = open("profile.txt", "a")
        search_tag = search_tag.rstrip()
        fh.write('\n')
        fh.write(search_tag)
        fh.write('\n')
        fh.write(user_class)
        fh.write('\n')
        fh.write(user_indexno)
        fh.close()
        savdat()

    #exit to main menu
    encryption()
    database()        

def search():
    print("\n\n\n▬▬▬▬▬SEARCH▬DATA▬▬▬▬▬")
    decryption()
    #check if tag is in file (citiif)
    def citiif(string_to_search):
        delahoya = open('profile.txt').readlines() 
        if string_to_search in delahoya[3::12]: #search for tag every 12th line in the file
            return True
        return False

    #find position of tag in file (fpotif)
    def fpotif(file_name, string_to_search):
        line_number = 0
        with open(file_name, 'r') as rob:
            for line in rob:
            # For each line, check if line contains the string
                line_number += 1
                if string_to_search in line:
                        # When line of tag is found 
                        return line_number
        return line_number
                

    global level

    #get level (glvl)
    def glvl():
        while True:
            try:
                level = int(input("What is your level: Secondary "))
                break
            except ValueError:
               print ("THAT IS NOT A NUMBER DO AGAIN")
            
        while (level<1) or (level>5):
            print("your level is not valid, please try again")
            while True:
                try:
                    level = int(input("What is your level: Secondary "))
                    break
                except ValueError:
                   print ("THAT IS NOT A NUMBER DO AGAIN")

        return level


    #get class (gclss):
    def gclss():
        level = str(glvl())
        print("1.Charity\n2.Integrity\n3.Humility\n4.Respect\n5.Love\n6.Faith\n7.Hope")
        while True:
            try:
                jar = int(input("Please enter the number of your corresponding class: "))
                break
            except ValueError:
               print ("THAT IS NOT A NUMBER DO AGAIN")

        while (jar<1) or (jar>7):
            print("that input is not valid, please try again")
            while True:
                try:
                    jar = int(input("Please enter the number of your corresponding class: ")) 
                    break
                except ValueError:
                   print ("THAT IS NOT A NUMBER DO AGAIN")
           
        level = str(level)
        if jar == 1:
            Class = str(level+"cha")
        elif jar == 2:
            Class = str(level+ "int")
        elif jar == 3:
            Class = str(level+"hum")
        elif jar == 4:
            Class = str(level+"res")
        elif jar == 5:
            Class = str(level+"lov")
        elif jar == 6:
            Class = str(level+"fai")
        else:
            Class = str(level+"hop")

        return Class


    #get index number (gindx)
    def gindx():
        while True:
            try:
                number = int(input("enter your index number: "))
                break
            except ValueError:
               print ("THAT IS NOT A NUMBER DO AGAIN")
        indexno = ("%02d" % number)
        indexno = str(indexno)

        while (number<1) or (len(indexno)!=2):
            print("index number has to be 2 digits long")
            while True:
                try:
                    number = int(input("enter your index number: "))
                    break
                except ValueError:
                   print ("THAT IS NOT A NUMBER DO AGAIN")
            indexno = ("%02d" % number)
            indexno = str(indexno)
            
        return indexno

    chad = 3
    Class = gclss()
    indexno = gindx()
    search_tag= str(Class+indexno+"\n")

    if citiif(search_tag) == True:
        chad = 1   
      

    if citiif(search_tag) == False:
        print("Sorry but we don't have your data")
        ginger = input("enter any button to try again or 1 to exit ")
        if ginger == "1":
            print("goodbye") 
            #exit to menu
        else:
            time.sleep(1)
            while citiif(search_tag) == False:            
                Class = gclss()
                indexno = gindx()
                search_tag= str(Class+indexno+"\n")
                if citiif(search_tag) == True:
                    chad = 1
                    break
                else:
                    print("Sorry, we still can't identify you, do you want to exit?")
                    squidward = input("Enter 1 to exit or any other button to try again: ")
                    if squidward == "1":
                        chad = 2
                        break

    if chad == 1:            
        print("please hold while we retrieve your information")
        time.sleep(1)
        print(".")
        user_tag = fpotif('profile.txt', search_tag)
        fiver = open('profile.txt')
        linus = fiver.readlines()
        time.sleep(1)
        print("Hello", linus[user_tag+2],
              "\nThis is your data:",
              "\n\nClass:" , linus[user_tag],
              "\nIndex number:", linus[user_tag+1],
              "\nFull name:" , linus[user_tag+2],
              "\nDate of birth (DD/MM/YYYY):" , linus[user_tag+3],
              "\ngender:" , linus[user_tag+4],
              "\nnationality:", linus[user_tag+5],
              "\naddress:", linus[user_tag+6],
              "\nmedical conditions:", linus[user_tag+7],
              "\nstudent's handphone number:", linus[user_tag+8],
              "\nparent/guardian's name:", linus[user_tag+9],
              "\nparent/guardian's handphone number:", linus[user_tag+10])
        time.sleep(1)

    encryption()
    database()

def amend():
    print("\n\n\n▬▬▬▬▬AMEND▬DATA▬▬▬▬▬")
    decryption()
    #search:
    #check if tag is in file (citiif)
    def citiif(string_to_search):
        delahoya = open('profile.txt').readlines() #makes a list of every line (tag)
        if string_to_search in delahoya[3::12]: #search for tag in list - every 12 lines
            return True
        return False

    #find position of tag in file (fpotif)
    def fpotif(file_name, string_to_search):
        line_number = 0
        with open(file_name, 'r') as rob:
            for line in rob:
            # For each line, check if line contains the string
                line_number += 1
                if string_to_search in line:
                        # When line of tag is found 
                        return line_number
        return line_number
                
    global level

    #get level (glvl)
    def glvl():
        while True:
            try:
                level = int(input("What is your level: Secondary "))
                break
            except ValueError:
               print ("THAT IS NOT A NUMBER DO AGAIN")
            
        while (level<1) or (level>5):
            print("your level is not valid, please try again")
            while True:
                try:
                    level = int(input("What is your level: Secondary "))
                    break
                except ValueError:
                   print ("THAT IS NOT A NUMBER DO AGAIN")

        return level

    #get class (gclss):
    def gclss():
        level = str(glvl())
        print("1.Charity\n2.Integrity\n3.Humility\n4.Respect\n5.Love\n6.Faith\n7.Hope")
        while True:
            try:
                jar = int(input("Please enter the number of your corresponding class: "))
                break
            except ValueError:
               print ("THAT IS NOT A NUMBER DO AGAIN")

        while (jar<1) or (jar>7):
            print("that input is not valid, please try again")
            while True:
                try:
                    jar = int(input("Please enter the number of your corresponding class: ")) 
                    break
                except ValueError:
                   print ("THAT IS NOT A NUMBER DO AGAIN")
           
        level = str(level)
        if jar == 1:
            Class = str(level+"cha")
        elif jar == 2:
            Class = str(level+ "int")
        elif jar == 3:
            Class = str(level+"hum")
        elif jar == 4:
            Class = str(level+"res")
        elif jar == 5:
            Class = str(level+"lov")
        elif jar == 6:
            Class = str(level+"fai")
        else:
            Class = str(level+"hop")

        return Class


    #get index number (gindx)
    def gindx():
        while True:
            try:
                number = int(input("enter your index number: "))
                break
            except ValueError:
               print ("THAT IS NOT A NUMBER DO AGAIN")
        indexno = ("%02d" % number)
        indexno = str(indexno)

        while (number<1) or (len(indexno)!=2):
            print("index number has to be 2 digits long")
            while True:
                try:
                    number = int(input("enter your index number: "))
                    break
                except ValueError:
                   print ("THAT IS NOT A NUMBER DO AGAIN")
            indexno = ("%02d" % number)
            indexno = str(indexno)
            
        return indexno

    global level

    #get new level (gtnwlvl)
    def gtnwlvl():
        while True:
            try:
                level2 = int(input("What is your new level: Secondary "))
                break
            except ValueError:
               print ("THAT IS NOT A NUMBER DO AGAIN")
            
        while (level2<1) or (level2>5):
            print("your level is not valid, please try again")
            while True:
                try:
                    level2 = int(input("What is your new level: Secondary "))
                    break
                except ValueError:
                   print ("THAT IS NOT A NUMBER DO AGAIN")

        return level2

    global Class
    #get new class (gtnwclss):
    def gtnwclss():
        level = str(gtnwlvl())
        print("1.Charity\n2.Integrity\n3.Humility\n4.Respect\n5.Love\n6.Faith\n7.Hope")
        while True:
            try:
                jar = int(input("Please enter the corresponding number of your desired class: "))
                break
            except ValueError:
               print ("THAT IS NOT A NUMBER DO AGAIN")

        while (jar<1) or (jar>7):
            print("that input is not valid, please try again")
            while True:
                try:
                    jar = int(input("Please enter the corresponding number of your desired class: "))
                    break
                except ValueError:
                   print ("THAT IS NOT A NUMBER DO AGAIN")
               
        level = str(level)
        if jar == 1:
            Class = str(level+"cha")
        elif jar == 2:
            Class = str(level+ "int")
        elif jar == 3:
            Class = str(level+"hum")
        elif jar == 4:
            Class = str(level+"res")
        elif jar == 5:
            Class = str(level+"lov")
        elif jar == 6:
            Class = str(level+"fai")
        else:
            Class = str(level+"hop")

        return Class


    #get new index number (gindx)
    def gtnwindx():
        while True:
            try:
                number2 = int(input("enter your new index number: "))
                break
            except ValueError:
               print ("THAT IS NOT A NUMBER DO AGAIN")
        indexno2 = ("%02d" % number2)
        indexno2 = str(indexno2)

        while (number2<1) or (len(indexno2)!=2):
            print("index number has to be 2 digits long")
            while True:
                try:
                    number2 = int(input("enter your new index number: "))
                    break
                except ValueError:
                   print ("THAT IS NOT A NUMBER DO AGAIN")
            indexno2 = ("%02d" % number2)
            indexno2 = str(indexno2)
            
        return indexno2

    def new_tag():
        wanted_class = gtnwclss()
        wanted_indexno = gtnwindx()
        wanted_tag = str(wanted_class + wanted_indexno+"\n")
        koon = open('profile.txt').read().splitlines()
        if citiif(wanted_tag) == True:
            print("index number", wanted_indexno, "from class", wanted_class, "is currently taken.")
            olajide = input("enter 1 to try another class and index number, 2 to swap classes with the current occupant or any other button to exit: ")
            if olajide == "1":
                ritchie = "1"
                while ritchie == "1":
                    wanted_class = gtnwclss()
                    wanted_indexno = gtnwindx()
                    wanted_tag = (wanted_class + wanted_indexno+"\n")
                    if citiif(wanted_tag) == True:
                        ritchie = input("That class and/or index number is still taken. Enter 1 to try again or enter any other button to exit: ")
                        
            elif olajide == "2":
                 print("are you sure you have the current user's permission to swap tags?")
                 #ritchie you might want to add a security function here
                 coxlong = input("enter 1 to exit or any other button to continue: ")
                 coxlong = input("ARE YOU SURE U HAVE THEIR PERMSISSION? enter 1 to exit or any other button to continue: ")
                 if coxlong == "1":
                     print("understandable have a nice day")
                 else:
                     shaq = fpotif('profile.txt', wanted_tag)
                     user_tag = fpotif('profile.txt', search_tag)
                     fatneek = search_tag.rstrip()
                     akneehow = wanted_tag.rstrip()
                     koon[user_tag-1] = akneehow
                     koon[user_tag] = wanted_class
                     koon[user_tag+1] = wanted_indexno
                     koon[shaq-1] = fatneek
                     koon[shaq] = Class
                     koon[shaq+1] = indexno
                     open('profile.txt','w').write('\n'.join(koon))
                     print("your class and index numbers have been swapped. goodbye")

            else:
                print("goodbye")
                                      
        if citiif(wanted_tag) == False:
            user_tag = fpotif('profile.txt', search_tag)
            akneehow = wanted_tag.rstrip()
            koon[user_tag-1] = akneehow
            koon[user_tag] = wanted_class
            koon[user_tag+1] = wanted_indexno
            open('profile.txt','w').write('\n'.join(koon))
            print("your class and index numbers have been updated. goodbye")


    #user's date of birth(dtfbrth)
    def dtfbrth():
        print("Date of Birth")
        time.sleep(1)
        while True:
            try:
                year = int(input("Year(YYYY): "))
                break
            except ValueError:
                print("Enter a number please")
        while year<2002 or year>2010:
            print("that is not a valid year try again")
            while True:
                try:
                    year = int(input("Year(YYYY): "))
                    break
                except ValueError:
                    print("Enter a number please")

        while True:
            try:
                month = int(input("Month(MM): "))
                break
            except ValueError:
                print("try again, please enter the number of the month")
        while (month<1) or (month>12):
            print("that is not a valid month")
            while True:
                try:
                    month = int(input("Month(MM): "))
                    break
                except ValueError:
                    print("please enter the number of the month")

        date = 0
        if month == 1 or 3 or 5 or 7 or 8 or 10 or 12:
            while (date<1) or (date>31):
                while True:
                    try:
                        date =  int(input("Day(DD): "))
                        break
                    except ValueError:
                        print("Please enter a number")
                if (date<1) or (date>30):
                    print("that's not a valid day in relation to your month")
                else:
                    break
                            
        elif month == 4 or 6 or 9 or 11:
            while (date<1) or (date>30):
                while True:
                    try:
                        date =  int(input("Day(DD): "))
                        break
                    except ValueError:
                        print("Please enter a number")
                if (date<1) or (date>30):
                    print("that's not a valid day in relation to your month")
                else:
                    break
                    
        else:
            if year%4 == 0:
                while (date<1) or (date>29):
                    while True:
                        try:
                            date =  int(input("Day(DD): "))
                            break
                        except ValueError:
                            print("Please enter a number")
                    if (date<1) or (date>29):
                        print("that's not a valid day in relation to your month")
                    else:
                        break
                    
                
            else:
                while (date<1) or (date>28):
                    while True:
                        try:
                            date =  int(input("Day(DD): "))
                            break
                        except ValueError:
                            print("Please enter a number")
                    if (date<1) or (date>28):
                        print("that's not a valid day in relation to your month")
                    else:
                        break
                                            
        month = str("%02d" % month)
        date = str(date)
        year = str(year)
        donk = str(date+"/"+month+"/"+year)
        return donk


    Class = gclss()
    indexno = gindx()
    search_tag= str(Class+indexno+"\n")
    user_tag = fpotif('profile.txt', search_tag)
    koon = open('profile.txt').read().splitlines()

    while citiif(search_tag) == False:
        print("we can't seem to identify you, would you like to try again?")
        iridocyclitis = input("enter any button to try again or 1 to exit: ")
        if iridocyclitis == "1":
            break  #exit to main menu
        else:
            Class = gclss()
            indexno = gindx()
            search_tag= str(Class+indexno+"\n")

    chlamydia = "1"
    if citiif(search_tag) == True:
        while chlamydia == "1":
            print(".")
            print("1. Class and index number\n2. Name\n3. Date of birth\n4. Gender\n5. Nationality\n6. Address\n7. Medical conditions"
                  "\n8. Student personal mobile phone number\n9. Parent/Guardian name\n10. Parent/Guardian phone number\n11. Exit")
            while True:
                try:
                    hiv = int(input("Enter the corresponding number of the peice of your data you would like to ammend: "))
                    break
                except ValueError:
                    print("that is not a valid number")
            while (hiv > 11) or (hiv < 1):
                print("that isn't a valid number please try again")
                while True:
                    try:
                        hiv = int(input("Enter the number of the peice of your data you would like to amend: "))
                        break
                    except ValueError:
                        print("that is not a valid number")

            print(".")
            time.sleep(1)
            if hiv == 1:
                new_tag()

            elif hiv == 2:
                fullname= input("full name(Birth certificate): ")
                while fullname == "":
                    print("this is a compulsory question")
                    fullname= input("full name(Birth certificate): ")
                with open('profile.txt') as f:
                    normal = f.readlines()
                check = normal[3::12]
                checkmate = str(fullname+"\n") in check
                while checkmate == True:
                    print("that is not a valid name, try again")
                    fullname= input("full name(Birth certificate): ")
                    while fullname == "":
                        print("this is a compulsory question")
                        fullname= input("full name(Birth certificate): ")
                    check = normal[3::12]
                    checkmate = str(fullname+"\n") in check
                koon[user_tag+2] = fullname
                open('profile.txt','w').write('\n'.join(koon))
                print("your data has been updated")

              
            elif hiv == 3:
                dob = dtfbrth()
                koon[user_tag+3] = dob
                open('profile.txt','w').write('\n'.join(koon))
                print("your data has been updated") 
                
            elif hiv == 4:
                gender = input("gender: ")
                while gender == "":
                    print("this is a compulsory question")
                    gender = input("gender: ")
                with open('profile.txt') as f:
                    normal = f.readlines()
                check = normal[3::12]
                checkmate = str(gender +"\n") in check
                while checkmate == True:
                    print("that is not a valid gender (YES SHUT UP NOT VALID), try again")
                    gender = input("gender: ")
                    while gender == "":
                        print("this is a compulsory question")
                        gender = input("gender: ")
                    check = normal[3::12]
                    checkmate = str(gender +"\n") in check
                koon[user_tag+4] = gender
                open('profile.txt','w').write('\n'.join(koon))
                print("your data has been updated")
            
            elif hiv == 5:
                nation = input("nationality: ")
                while nation == "":
                    print("this is a compulsory question")
                    nation = input("nationality: ")
                with open('profile.txt') as f:
                    normal = f.readlines()
                check = normal[3::12]
                checkmate = str(nation +"\n") in check
                while checkmate == True:
                    print("that is not a valid nationality, try again")
                    nation = input("nationality: ")
                    while nation == "":
                        print("this is a compulsory question")
                        nation = input("nationality: ")
                    check = normal[3::12]
                    checkmate = str(nation +"\n") in check    
                koon[user_tag+5] = nation
                open('profile.txt','w').write('\n'.join(koon))
                print("your data has been updated")

            elif hiv == 6:
                address = input("address: ")
                while address == "":
                    print("this is a compulsory question")
                    address = input("address: ")
                with open('profile.txt') as f:
                    normal = f.readlines()
                check = normal[3::12]
                checkmate = str(address +"\n") in check
                while checkmate == True:
                    print("that is not a valid ADDRESS, try again")
                    address = input("address: ")
                    while address == "":
                        print("this is a compulsory question")
                        address = input("address: ")
                    check = normal[3::12]
                    checkmate = str(address +"\n") in check
                koon[user_tag+6] = address
                open('profile.txt','w').write('\n'.join(koon))
                print("your data has been updated")

            elif hiv == 7:
                medcon = input("any medical conditions: ")
                while medcon =="":
                    print("this is a compulsory question")
                    medcon = input("any medical conditions: ")
                with open('profile.txt') as f:
                    normal = f.readlines()
                check = normal[3::12]
                checkmate = str(medcon +"\n") in check
                while checkmate == True:
                    print("that is not a valid input, try again")
                    medcon = input("any medical conditions: ")
                    while medcon =="":
                        print("this is a compulsory question")
                        medcon = input("any medical conditions: ")
                    check = normal[3::12]
                    checkmate = str(medcon +"\n") in check   
                koon[user_tag+7] = medcon
                open('profile.txt','w').write('\n'.join(koon))
                print("your data has been updated")

            elif hiv == 8:
                while True:
                    try:
                        stdntno = int(input("student phone number: "))
                        break
                    except ValueError:
                        print ("THAT IS NOT A NUMBER DO AGAIN")
                studenthp = str(stdntno)
                while (len(studenthp) < 8) or (stdntno<1):
                    print ("that is not a valid phone number")
                    while True:
                        try:
                            stdntno = int(input("student phone number: "))
                            break
                        except ValueError:
                            print ("THAT IS NOT A NUMBER DO AGAIN")
                    studenthp = str(stdntno)
                koon[user_tag+8] = studenthp
                open('profile.txt','w').write('\n'.join(koon))
                print("your data has been updated")

            elif hiv == 9:
                parentname = input("Parent/Guardian's name: ")
                while parentname == "":
                     print("this is a compulsory question")
                     parentname = input("Parent/Guardian's name: ")
                with open('profile.txt') as f:
                    normal = f.readlines()
                check = normal[3::12]
                checkmate = str(parentname +"\n") in check
                while checkmate == True:
                    print("that is not a valid input, try again")
                    parentname = input("Parent/Guardian's name: ")
                    while parentname == "":
                         print("this is a compulsory question")
                         parentname = input("Parent/Guardian's name: ")
                    check = normal[3::12]
                    checkmate = str(parentname +"\n") in check
                koon[user_tag+9] = parentname
                open('profile.txt','w').write('\n'.join(koon))
                print("your data has been updated")

            elif hiv == 10:
                while True:
                    try:
                        prnthpno = int(input("parent/guardian's phone number: "))
                        break
                    except ValueError:
                       print ("THAT IS NOT A NUMBER DO AGAIN")
                parenthp = str(prnthpno)
                while (len(parenthp) < 8) or (prnthpno<1):
                    print ("that is not a valid phone number")            
                    while True:
                        try:
                            prnthpno = int(input("parent/guardian's phone number: "))
                            break
                        except ValueError:
                           print ("THAT IS NOT A NUMBER DO AGAIN")
                    parenthp = str(parentno) 
                koon[user_tag+10] = parenthp
                open('profile.txt','w').write('\n'.join(koon))
                print("your data has been updated")

            elif hiv == 11:
                chlamydia = 0

            while chlamydia == "1":
                time.sleep(1)
                chlamydia =  input("do you want to amend anything else? enter 1 to continue amending or any other button to exit: ")
                time.sleep(1)
                if chlamydia == "1":
                    break
                

    encryption()
    database()


def delete():
    print("\n\n\n▬▬▬▬▬DELETE▬DATA▬▬▬▬▬")
    decryption()
    global level
    #search:
    #check if tag is in file (citiif)
    def citiif(string_to_search):
        delahoya = open('profile.txt').readlines() 
        if string_to_search in delahoya[3::12]: #search for tag every 12th line in the file
            return True
        return False

    #find position of tag in file (fpotif)
    def fpotif(file_name, string_to_search):
        dorrito = open(file_name, 'r').readlines()
        chewchewchew = dorrito.index(string_to_search)
        return chewchewchew
                

    #get level (glvl)
    def glvl():
        while True:
            try:
                level = int(input("What is your level: Secondary "))
                break
            except ValueError:
               print ("THAT IS NOT A NUMBER DO AGAIN")
            
        while (level<1) or (level>5):
            print("your level is not valid, please try again")
            while True:
                try:
                    level = int(input("What is your level: Secondary "))
                    break
                except ValueError:
                   print ("THAT IS NOT A NUMBER DO AGAIN")

        return level

    #get class (gclss):
    def gclss():
        level = str(glvl())
        print("1.Charity\n2.Integrity\n3.Humility\n4.Respect\n5.Love\n6.Faith\n7.Hope")
        while True:
            try:
                jar = int(input("Please enter the number of your corresponding class: "))
                break
            except ValueError:
               print ("THAT IS NOT A NUMBER DO AGAIN")

        while (jar<1) or (jar>7):
            print("that input is not valid, please try again")
            while True:
                try:
                    jar = int(input("Please enter the number of your corresponding class: ")) 
                    break
                except ValueError:
                   print ("THAT IS NOT A NUMBER DO AGAIN")
           
        level = str(level)
        if jar == 1:
            Class = str(level+"cha")
        elif jar == 2:
            Class = str(level+ "int")
        elif jar == 3:
            Class = str(level+"hum")
        elif jar == 4:
            Class = str(level+"res")
        elif jar == 5:
            Class = str(level+"lov")
        elif jar == 6:
            Class = str(level+"fai")
        else:
            Class = str(level+"hop")

        return Class


    #get index number (gindx)
    def gindx():
        while True:
            try:
                number = int(input("enter your index number: "))
                break
            except ValueError:
               print ("THAT IS NOT A NUMBER DO AGAIN")
        indexno = ("%02d" % number)
        indexno = str(indexno)

        while (number<1) or (len(indexno)!=2):
            print("index number has to be 2 digits long")
            while True:
                try:
                    number = int(input("enter your index number: "))
                    break
                except ValueError:
                   print ("THAT IS NOT A NUMBER DO AGAIN")
            indexno = ("%02d" % number)
            indexno = str(indexno)
            
        return indexno

    print("please enter the following details so we can identify you")
    Class = gclss()
    indexno = gindx()
    search_tag= str(Class+indexno+"\n")
    help_me = 0
    while citiif(search_tag) == False:
        print("Sorry but we could'nt identify you")
        ginger = input("enter any button to try again or 1 to exit ")
        if ginger == "1":
            print("goodbye")
            help_me = 1
            #exit to menu
        else:
            time.sleep(1)        
            Class = gclss()
            indexno = gindx()
            search_tag= str(Class+indexno+"\n")
                

    if help_me == 0:           
        user_tag = fpotif('profile.txt', search_tag)
        print("Are you sure you want to delete?")
        blipblop= input("enter any button to continue, or enter 1 to exit ")

        if blipblop == "1":
            print("your data has not been deleted, goodbye") #exit to main menu

        else:
            kay = -1
            koon = open('profile.txt', 'r').read().splitlines()
            for i in range(12):
                kay += 1
                koon[user_tag+kay] = "deleted line"
                
            open('profile.txt','w').write("\n".join(koon))
            print("your data has been deleted")

    encryption()
    database()


